import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import {
  IsString,
  IsArray,
  IsBoolean,
  IsOptional,
  IsNotEmpty,
  IsNumber,
  IsObject,
  ValidateNested,
  IsEnum,
  ArrayMinSize
} from 'class-validator';
import { Type } from 'class-transformer';

export class ConditionDto {
  @ApiProperty({ description: 'Field to evaluate in the condition', example: 'eventType' })
  @IsString()
  @IsNotEmpty()
  field: string;

  @ApiProperty({ 
    description: 'Operator for condition evaluation',
    example: 'eq',
    enum: ['eq', 'neq', 'gt', 'gte', 'lt', 'lte', 'contains', 'notContains', 'startsWith', 'endsWith', 
           'matches', 'in', 'notIn', 'exists', 'notExists']
  })
  @IsString()
  @IsNotEmpty()
  operator: string;

  @ApiPropertyOptional({
    description: 'Value to compare against (not required for exists/notExists operators)',
    example: 'authentication_failure'
  })
  @IsOptional()
  value?: any;
}

export class LogicalGroupDto {
  @ApiProperty({ 
    description: 'Logical operator',
    example: 'and',
    enum: ['and', 'or', 'not']
  })
  @IsString()
  @IsEnum(['and', 'or', 'not'])
  logic: string;

  @ApiProperty({ 
    description: 'Conditions or nested logical groups',
    type: [Object]
  })
  @IsArray()
  @ArrayMinSize(1)
  conditions: (ConditionDto | LogicalGroupDto)[];
}

export class ActionParameterDto {
  @ApiProperty({ 
    description: 'Type of action to perform',
    example: 'create_alert',
    enum: ['create_alert', 'update_entity', 'send_notification']
  })
  @IsString()
  @IsNotEmpty()
  type: string;

  @ApiProperty({
    description: 'Parameters for the action',
    type: Object,
    example: { severity: 'high', title: 'Custom alert title' }
  })
  @IsObject()
  parameters: Record<string, any>;
}

export class SequenceStageDto {
  @ApiPropertyOptional({ description: 'Name of the sequence stage', example: 'Initial Access' })
  @IsString()
  @IsOptional()
  name?: string;

  @ApiProperty({ 
    description: 'Conditions to match for this stage',
    type: [ConditionDto]
  })
  @IsArray()
  @ArrayMinSize(1)
  @ValidateNested({ each: true })
  @Type(() => ConditionDto)
  conditions: ConditionDto[];

  @ApiPropertyOptional({ 
    description: 'Whether multiple events can match this stage',
    example: false,
    default: false
  })
  @IsBoolean()
  @IsOptional()
  multipleMatches?: boolean;
}

export class AggregationDto {
  @ApiProperty({ description: 'Name of the aggregation', example: 'failed_login_count' })
  @IsString()
  @IsNotEmpty()
  name: string;

  @ApiProperty({ 
    description: 'Type of aggregation',
    example: 'count',
    enum: ['count', 'sum', 'average', 'max', 'min', 'distinct']
  })
  @IsString()
  @IsNotEmpty()
  type: string;

  @ApiProperty({ description: 'Field to aggregate on', example: 'value' })
  @IsString()
  @IsNotEmpty()
  field: string;

  @ApiPropertyOptional({ 
    description: 'Filters for the aggregation',
    type: [ConditionDto]
  })
  @IsArray()
  @IsOptional()
  @ValidateNested({ each: true })
  @Type(() => ConditionDto)
  filters?: ConditionDto[];

  @ApiPropertyOptional({ description: 'Threshold for the aggregation value', example: 5 })
  @IsNumber()
  @IsOptional()
  threshold?: number;

  @ApiPropertyOptional({ 
    description: 'Operator for threshold comparison',
    example: 'gte',
    enum: ['eq', 'neq', 'gt', 'gte', 'lt', 'lte']
  })
  @IsString()
  @IsOptional()
  operator?: string;
}

export class CreateCorrelationRuleDto {
  @ApiProperty({ description: 'Name of the correlation rule', example: 'Brute Force Attack Detection' })
  @IsString()
  @IsNotEmpty()
  name: string;

  @ApiPropertyOptional({ description: 'Description of the rule', example: 'Detects multiple failed login attempts' })
  @IsString()
  @IsOptional()
  description?: string;

  @ApiProperty({ 
    description: 'Type of correlation rule',
    example: 'threshold',
    enum: ['simple', 'threshold', 'sequence', 'aggregation', 'pattern', 'behavioral'],
    default: 'simple'
  })
  @IsString()
  @IsNotEmpty()
  type: string;

  @ApiPropertyOptional({ 
    description: 'Whether the rule is enabled',
    example: true,
    default: true
  })
  @IsBoolean()
  @IsOptional()
  enabled?: boolean;

  @ApiPropertyOptional({ 
    description: 'Event types this rule applies to',
    type: [String],
    example: ['authentication_failure', 'access_denied'] 
  })
  @IsArray()
  @IsString({ each: true })
  @IsOptional()
  eventTypes?: string[];

  @ApiPropertyOptional({ 
    description: 'Severity of alerts generated by this rule',
    example: 'high',
    enum: ['critical', 'high', 'medium', 'low', 'info'],
    default: 'medium'
  })
  @IsString()
  @IsOptional()
  severity?: string;

  @ApiPropertyOptional({ 
    description: 'Category of the rule',
    example: 'authentication' 
  })
  @IsString()
  @IsOptional()
  category?: string;

  @ApiProperty({ 
    description: 'Conditions for rule matching',
    type: [ConditionDto],
    example: [{ field: 'eventType', operator: 'eq', value: 'authentication_failure' }]
  })
  @IsArray()
  @ArrayMinSize(1)
  @ValidateNested({ each: true })
  @Type(() => ConditionDto)
  conditions: ConditionDto[];

  @ApiPropertyOptional({ 
    description: 'Actions to perform when rule matches',
    type: [ActionParameterDto]
  })
  @IsArray()
  @IsOptional()
  @ValidateNested({ each: true })
  @Type(() => ActionParameterDto)
  actions?: ActionParameterDto[];

  @ApiPropertyOptional({ 
    description: 'Time window in seconds for correlation',
    example: 3600
  })
  @IsNumber()
  @IsOptional()
  timeWindow?: number;

  @ApiPropertyOptional({ 
    description: 'Threshold count for threshold rules',
    example: 5
  })
  @IsNumber()
  @IsOptional()
  threshold?: number;

  @ApiPropertyOptional({ 
    description: 'Sequence stages for sequence rules',
    type: [SequenceStageDto]
  })
  @IsArray()
  @IsOptional()
  @ValidateNested({ each: true })
  @Type(() => SequenceStageDto)
  sequence?: SequenceStageDto[];

  @ApiPropertyOptional({ 
    description: 'Aggregations for aggregation rules',
    type: [AggregationDto]
  })
  @IsArray()
  @IsOptional()
  @ValidateNested({ each: true })
  @Type(() => AggregationDto)
  aggregations?: AggregationDto[];

  @ApiPropertyOptional({ 
    description: 'Pattern configuration for pattern rules',
    type: Object,
    example: { type: 'frequency', groupBy: 'sourceIp', threshold: 5 }
  })
  @IsObject()
  @IsOptional()
  pattern?: Record<string, any>;

  @ApiPropertyOptional({ 
    description: 'Tags for categorizing the rule',
    type: [String],
    example: ['authentication', 'brute-force']
  })
  @IsArray()
  @IsString({ each: true })
  @IsOptional()
  tags?: string[];

  @ApiPropertyOptional({ 
    description: 'MITRE ATT&CK tactic',
    example: 'TA0001'
  })
  @IsString()
  @IsOptional()
  tactic?: string;

  @ApiPropertyOptional({ 
    description: 'MITRE ATT&CK technique',
    example: 'T1110'
  })
  @IsString()
  @IsOptional()
  technique?: string;

  @ApiPropertyOptional({ 
    description: 'Additional metadata',
    type: Object
  })
  @IsObject()
  @IsOptional()
  metadata?: Record<string, any>;
}